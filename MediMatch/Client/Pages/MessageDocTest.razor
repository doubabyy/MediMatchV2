@page "/MessageDocTest"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using MediMatch.Shared
@using System.Security.Claims;
@layout DoctorLayout
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]
@inject HttpClient Http

<PageTitle>Message</PageTitle>

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat </title>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <style>
        .chat {
            background-color: #f2f2f2;
            padding: 10px;
        }

        .message {
            background-color: #89CFF0;
            padding: 10px;
            margin-bottom: 10px;
            border-radius: 10px;
        }

        .sender {
            font-weight: bold;
            margin-bottom: 5px;
        }
        
        .textcontent {
            margin: 0px;
        }

    </style>
</head>
<body>
    <div class="container">
        <div class="row">
            <div class="col-md-4">
                <h2 class="tight-spacing">Past Chats</h2>
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>User</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in matchedUsers)
                        {
                            <tr>
                                <td>@item.FirstName</td>
                                <button class="btn btn-primary" @onclick="@(() => SelectUser(item))">Select</button>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <div class="col-md-8">
                <h1 class="tight-spacing-below">Messages with @(selectedUser.FirstName + " " + selectedUser.LastName)</h1>
                <div class="chat">
                    @foreach (var message in messages)
                    {
                        <div class="message">
                            <p class="sender">@((message.MessageFromID == currentUser.Id) ? currentUser.FirstName : selectedUser.FirstName)</p>
                            <p class="textcontent">@message.MessageTxt</p>
                        </div>
                    }
                </div>
            </div>

            <div class="col-md-8">
                <div class="form-group">
                    <label for="newMessage">New message:</label>
                    <textarea class="form-control" @bind="newMessageText" rows="3"></textarea>
                </div>
                <button class="btn btn-primary" @onclick="SendMessage">Send Message</button>
            </div>


        </div>
    </div>
</body>


@code {

    private ApplicationUserDto selectedUser = new ApplicationUserDto();
    private string newMessageText = "";
    private List<Message> messages = new List<Message>();
    private ApplicationUserDto currentUser;
    private List<ApplicationUserDto> matchedUsers = new List<ApplicationUserDto>();

    protected override async Task OnInitializedAsync()
    {
        currentUser = await Http.GetFromJsonAsync<ApplicationUserDto>("GetUser");
        matchedUsers = await Http.GetFromJsonAsync<List<ApplicationUserDto>>("GetUsers");
        StateHasChanged();
    }


    private async Task FetchMessages()
    {
        messages = await Http.GetFromJsonAsync<List<Message>>("api/GetMessages");
    }
    // send message method
    private async Task SendMessage()
    {
        if (!string.IsNullOrEmpty(newMessageText) && selectedUser != null)
        {
            if (currentUser == null)
            {
                Console.WriteLine("Error: currentUserID is empty or null");
                return;
            }

            var newMessage = new Message { MessageTxt = newMessageText, MessageFromID = currentUser.Id, MessageToID = selectedUser.Id, MessageDate = DateTime.Now };
            await Http.PostAsJsonAsync("api/SendMessage", newMessage);
            messages = await Http.GetFromJsonAsync<List<Message>>($"GetMessagesBetweenUsers/{currentUser.Id}/{selectedUser.Id}");
            newMessageText = "";
            StateHasChanged();
        }
    }

    private async Task<string> GetUsernameById(string user_id)
    {
        string output = await Http.GetStringAsync("GetUsernameById/" + user_id);
        return output;
    }

    private async Task SelectUser(ApplicationUserDto otherUser)
    {
        if (otherUser != null)
        {
            try
            {
                selectedUser = otherUser;
                messages = await Http.GetFromJsonAsync<List<Message>>($"GetMessagesBetweenUsers/{currentUser.Id}/{selectedUser.Id}");
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.Write(ex.Message);
            }
        }
    }



}

