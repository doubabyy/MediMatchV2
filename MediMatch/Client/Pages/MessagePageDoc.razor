@page "/MessagePageDoc"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using MediMatch.Shared
@using System.Security.Claims;
@layout DoctorLayout
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]
@inject HttpClient Http

<PageTitle>Message</PageTitle>

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat </title>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <style>
        .chat-box {
            max-height: 400px;
            overflow-y: auto;
            margin-bottom: 20px;
            border: 1px solid #ccc;
            padding: 10px;
            border-radius: 5px;
        }

        .tight-spacing {
            margin-bottom: 0;
            padding-bottom: 0;
        }

        .tight-spacing-below {
            margin-top: 0;
            padding-top: 0;
        }

    </style>
</head>
<body>
    <div class="container">
        <div class="row">
            <div class="col-md-4">
                <h2 class="tight-spacing">Past Chats</h2>
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>User</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in matchedUsers)
                        {
                            <tr>
                                <td>@item.FirstName</td>
                                <button class="btn btn-primary" @onclick="@(() => SelectUser(item))">Select</button>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>


            <div class="col-md-3">
                
                <div class="form-group">
                    <label for="newMessage">New message:</label>
                    <textarea class="form-control" @bind="newMessageText" rows="3"></textarea>
                </div>
                <button class="btn btn-primary" @onclick="SendMessage">Send Message</button>

            </div>
            <div class="col-md-8">
                <h1 class="tight-spacing-below">Messages with @(selectedUser.FirstName + " " + selectedUser.LastName)</h1>
                <div class="chat-box">
                    <table class="table table-borderless">
                        <tbody>
                            @foreach (var message in messages)
                            {
                                @if (message.MessageFromID == currentUser.Id)
                                {
                                    <tr class="text-right">
                                        <td class = "bg-primary text-white text-right">@message.MessageTxt</td>
                                        <td>@currentUser.FirstName</td>
                                    </tr>
                                } else {
                                    <tr>
                                        <td>@selectedUser.FirstName</td>
                                        <td>@message.MessageTxt</td>
                                      
                                    </tr>
                                }
                                @*
                                <tr class="@((message.MessageFromID == currentUserID) ? "text-right" : "")">
                                    @string x= 
                                    <td>@(GetUsernameById(message.MessageFromID))</td>
                                    <td class="@((message.MessageFromID == currentUserID) ? "bg-primary text-white text-right" : "")">@message.MessageTxt</td>
                                </tr>
                                *@
                            }
                        </tbody>
                    </table>
                </div>

            </div>
        </div>
    </div>
</body>


@code {

    private ApplicationUserDto selectedUser = new ApplicationUserDto();
    private string newMessageText = "";
    private List<Message> messages = new List<Message>();
    private ApplicationUserDto currentUser;
    private List<ApplicationUserDto> matchedUsers = new List<ApplicationUserDto>();

    protected override async Task OnInitializedAsync()
    {
        currentUser = await Http.GetFromJsonAsync<ApplicationUserDto>("GetUser");
        matchedUsers = await Http.GetFromJsonAsync<List<ApplicationUserDto>>("GetUsers");
        StateHasChanged();
    }


    private async Task FetchMessages()
    {
        messages = await Http.GetFromJsonAsync<List<Message>>("api/GetMessages");
    }
    // send message method
    private async Task SendMessage()
    {
        if (!string.IsNullOrEmpty(newMessageText) && selectedUser != null)
        {
            if (currentUser==null)
            {
                Console.WriteLine("Error: currentUserID is empty or null");
                return;
            }

            var newMessage = new Message { MessageTxt = newMessageText, MessageFromID = currentUser.Id, MessageToID = selectedUser.Id, MessageDate = DateTime.Now };
            await Http.PostAsJsonAsync("api/SendMessage", newMessage);
            messages = await Http.GetFromJsonAsync<List<Message>>($"GetMessagesBetweenUsers/{currentUser.Id}/{selectedUser.Id}");
            newMessageText = "";
            StateHasChanged();
        }
    }

    private async Task<string> GetUsernameById(string user_id)
    {
        string output = await Http.GetStringAsync("GetUsernameById/" + user_id);
        return output;
    }

    private async Task SelectUser(ApplicationUserDto otherUser)
    {
        if (otherUser != null)
        {
            try{
                selectedUser = otherUser;
                messages = await Http.GetFromJsonAsync<List<Message>>($"GetMessagesBetweenUsers/{currentUser.Id}/{selectedUser.Id}");
                StateHasChanged();
            } catch (Exception ex)
            {
                Console.Write(ex.Message);
            }
        }
    }
    // method to get current user/ sender name
   // private async Task<string> GetCurrentUserAsync()
    //{
        //var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        //var user = authState.User.Identity;
        //Console.WriteLine(user.Id);

        //return user.Id;
    //}



}

